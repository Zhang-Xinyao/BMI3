from __future__ import division
from collections import defaultdict
import pandas as pd
from Bio import SeqIO
import os
import numpy as np
from itertools import combinations


base_path = "/Users/zhangxinyao/bat1K"

# species_name = str(input("Enter a species name: "))
species_name = "HLaseSto2"
target_path = os.path.join(base_path, species_name)

genome_fasta = os.path.join(target_path, f"{species_name}.fa")
if os.path.exists(genome_fasta):
    print("Genome fasta file already exists")
else:
    print("Genome fasta file does not exist")

genome_gtf = os.path.join(target_path, f"{species_name}_annotation.sorted.gtf")
if os.path.exists(genome_gtf):
    print("Genome gtf file already exists")
else:
    print("Genome gtf file does not exist")

def read_gtf_file(gtf_file):
    """
    :param gtf_file:
    :return: dictionary containing information about each scaffold (transcript id, start position, end position, strand)
    """
    scaffold_info = defaultdict(list)
    with open(gtf_file, 'r') as f:
        for line in f:
            line = line.strip()  # 去除行尾的空格
            if not line or line.startswith("#"):  # 跳过空行和注释行
                continue
            fields = line.split("\t")
            if len(fields) < 9:  # 确保每行至少有9个字段
                print(fields)
                continue
            scaffold = fields[0]  # 例如 manual_scaffold_2
            feature_type = fields[2]
            start = int(fields[3])  # 起始位置
            end = int(fields[4])    # 结束位置
            strand = fields[6]      # 链信息 '+' 或 '-'
            attributes = fields[8]

            # 提取转录本ID
            if 'transcript_id' in attributes:
                transcript_id = attributes.split('transcript_id "')[1].split('"')[0]
                # 将每个scaffold的转录本信息添加到列表中
                scaffold_info[scaffold].append((transcript_id, start, end, strand))
            else:
                print("can't find transcript_id")
    return scaffold_info


def read_fa_file(fa_file):
    """
    read fasta file and return a dictionary sequence information about each scaffold
    """
    sequences = {}
    for record in SeqIO.parse(fa_file, 'fasta'):
        sequences[record.id] = str(record.seq).upper()
    return sequences

def reverse_complement(sequence):
    return sequence[::-1].translate(str.maketrans('ATGC', 'TACG'))

def classify_sequences(fa_file, gtf_file):
    # 读取FASTA文件和GTF文件
    fa_sequences = read_fa_file(fa_file)
    gtf_info = read_gtf_file(gtf_file)

    pos_sequences = defaultdict(list)
    neg_sequences = defaultdict(list)

    # 遍历GTF文件中的每个转录本信息
    for scaffold in gtf_info.keys():
        # 确保FASTA文件中存在该scaffold的序列
        if scaffold in fa_sequences:
            sequence = fa_sequences[scaffold]
            for items in gtf_info[scaffold]:
                transcript_id, start, end, strand = items
                region_sequence = sequence[start - 1:end]  # 注意FASTA的索引是从0开始

                # 根据链信息分类
                if strand == '+':
                    pos_sequences[transcript_id].append(region_sequence)
                elif strand == '-':
                    neg_sequences[transcript_id].append(region_sequence)

    return pos_sequences, neg_sequences

pos_sequences, neg_sequences = classify_sequences(genome_fasta, genome_gtf)

# def check_complementarity(pos_sequences, neg_sequences):
#     complementarity_results = {}
#     for transcript_id in pos_sequences.keys():
#         if transcript_id not in neg_sequences:
#             complementarity_results[transcript_id] = False
#             continue
#
#         pos_seq_list = pos_sequences[transcript_id]
#         neg_seq_list = neg_sequences[transcript_id]
#
#         is_complementary = True
#         for pos_seq, neg_seq in zip(pos_seq_list, neg_seq_list):
#             reverse_comp = reverse_complement(pos_seq)
#             if reverse_comp != neg_seq:
#                 is_complementary = False
#                 break
#         complementarity_results[transcript_id] = is_complementary
#     return complementarity_results
#
# complementarity_results = check_complementarity(pos_sequences, neg_sequences)


def merge_and_deduplicate_sequences(pos_sequences, neg_sequences):
    integrated_sequences = defaultdict(set)

    for transcript_id in pos_sequences.keys() | neg_sequences.keys():
        pos_seq_list = pos_sequences.get(transcript_id, [])
        reverse_neg_list = [reverse_complement(seq) for seq in neg_sequences.get(transcript_id, [])]
        integrated_sequences[transcript_id] = set(pos_seq_list + reverse_neg_list)
    return integrated_sequences

integrated_sequences = merge_and_deduplicate_sequences(pos_sequences, neg_sequences)

gRNA = "GGAGAAGTACATGGAAATGT"
gRNA = gRNA.replace("U", "T")
max_mismatch = 4

def hamming_distance(str1: str, str2: str, max_mismatch: int) -> int:
    count = 0
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            count += 1
    return count

def find_pam_pos(sequence):
    pam_len=3
    seq_len = len(sequence)
    pos=[]
    for i in range(seq_len-pam_len+1):
        window = sequence[i:i+pam_len]
        if (window[0] in "ATCG") and (window[1:] == "GG"):
            pos.append(i)
    return pos

def find_off_target(sequences,gRNA,max_mismatch):
    gRNA_len = len(gRNA)
    results = defaultdict(list)
    for transcript_id in sequences.keys():
        sequences_temp = sequences[transcript_id]
        for sequence in sequences_temp:
            pam_pos = find_pam_pos(sequence)
            for pos in pam_pos:
                if pos >= gRNA_len:
                    window = sequence[pos-gRNA_len:pos]
                    mismatch = hamming_distance(window, gRNA, max_mismatch)
                    if mismatch <= max_mismatch:
                        results[gRNA].append((transcript_id, window, mismatch))
    return results

m1_dic={"p6rCdA": 0.2594828196793073, "p6rGdT": 0.7817902498267325, "p6rCdC": 0.10595399420748386, "p1rUdG": 0.3665687332072776, "p20rCdT": 1.096133668169228, "p1rUdC": 0.3892102384460873, "p17rUdG": 0.6692453512693496, "p17rUdC": 0.8706035984068058, "p1rUdT": 0.547106665838737, "p20rCdA": 1.0906312230467834, "p6rGdG": 0.22044949469919967, "p20rCdC": 1.1338310120846358, "p6rGdA": 0.22253070482768886, "p6rCdT": 0.22402808597208093, "p18rGdT": 0.8405301842598464, "p17rUdT": 0.5388140770572808, "p7rCdT": 0.25693542559214305, "p5rUdC": 0.3830298836058006, "p5rUdG": 0.5298642575290011, "p17rAdA": 0.5919393483690857, "p17rAdC": 0.8236446685878235, "p17rAdG": 0.5763771904324955, "p19rAdG": 1.005881062444212, "p5rUdT": 0.5613231225192761, "p19rAdC": 0.9853615558877628, "p19rAdA": 1.0237472324895895, "p2rAdG": 0.35832449789727056, "p9rAdA": 0.29723405069337977, "p9rAdC": 0.5054415912153309, "p2rAdC": 0.3858988368147437, "p2rAdA": 0.5875977525785341, "p9rAdG": 0.3373498738806768, "p16rAdG": 0.638095329259587, "p10rGdA": 0.6437416016647994, "p13rCdC": 0.6168158106610965, "p16rAdC": 0.8075660408756173, "p13rCdA": 0.7629496444994663, "p4rUdT": 0.3541250174741508, "p7rAdC": 0.4518928378594934, "p5rCdC": 0.2774183762163971, "p10rGdT": 1.0307081629572972, "p13rCdT": 0.8095712011534798, "p4rUdG": 0.6136845784594376, "p2rUdT": 0.5014743599276917, "p4rUdC": 0.31177314998444505, "p12rUdT": 1.0339165274506792, "p3rCdT": 0.6257153556280176, "p7rUdC": 0.12090978862723235, "p7rUdG": 0.4417100323839083, "p4rGdA": 0.4075580185571819, "p3rCdA": 0.5086953910371252, "p12rUdG": 1.0001261429128143, "p3rCdC": 0.09497743963820388, "p12rUdC": 0.7722692683683114, "p8rCdT": 0.5105222116555225, "p7rUdT": 0.4967021578830561, "p15rUdG": 1.0109584630399304, "p13rUdT": 1.0284614482708374, "p15rUdC": 0.7638998170375128, "p19rCdC": 0.9427846033044328, "p10rAdC": 0.6322458639188221, "p10rAdA": 0.4882548970037015, "p16rCdT": 0.8038259687606246, "p10rAdG": 0.6201667899405051, "p2rUdC": 0.2482095221281832, "p19rCdT": 0.9464280632169532, "p1rAdA": 0.5681880287655394, "p15rUdT": 1.0231870661157159, "p13rUdC": 0.5329878463261254, "p13rUdG": 1.1076698558570888, "p4rGdG": 0.19280596831150915, "p16rCdC": 0.7203316115954249, "p16rCdA": 0.8451749743245405, "p16rGdT": 0.9498924927301066, "p-1rGdT": 0.345480081731814, "p7rGdT": 0.7413158978448755, "p12rCdC": 0.7626966237537484, "p2rUdG": 0.4375991667237882, "p12rCdA": 0.9375348677859074, "p12rGdT": 0.9741341190951002, "p9rUdC": 0.4189022326405808, "p7rGdA": 0.2716562504199596, "p-1rGdG": 0.06829316550462411, "p-1rGdA": 0.19571935405062035, "p7rGdG": 0.3330578536937884, "p12rGdG": 0.5175840366350803, "p4rCdC": 0.13694490635595766, "p8rGdA": 0.4299454181595252, "p12rGdA": 0.6462513426830906, "p12rCdT": 0.7816216459868924, "p15rAdC": 0.7988862351293978, "p15rAdA": 0.6788271297102328, "p15rAdG": 0.7248673792640279, "p19rUdT": 0.9444105053450046, "p11rCdT": 0.5144793531050371, "p11rGdA": 0.9098123461932152, "p9rUdT": 0.7798341869152838, "p11rGdG": 0.7821600583118402, "p18rAdC": 0.8283846130571969, "p19rUdC": 0.9955970334287482, "p18rAdA": 0.9379169035649456, "p18rAdG": 0.5443928971842268, "p19rUdG": 1.0468760920746956, "p14rAdG": 0.3762691332622255, "p11rGdT": 0.9184625024943129, "p11rCdA": 0.8034451243027411, "p14rAdA": 0.5617675427322376, "p11rCdC": 0.30927057920812306, "p3rGdT": 0.8418784532422315, "p5rGdA": 0.08776643139880617, "p9rGdG": 0.6396205155477931, "p10rUdG": 0.8649749631400924, "p8rAdG": 0.2534908441198674, "p10rUdC": 0.3888040785610675, "p20rGdG": 1.042555523303752, "p8rAdC": 0.7259356230590128, "p5rGdG": 0.10819976367820963, "p3rGdG": 0.4974044919340275, "p3rGdA": 0.4893364912981912, "p4rCdA": 0.5519308494221198, "p17rGdG": 0.5892851339525831, "p10rUdT": 0.7736273346611865, "p20rAdC": 1.0777900547330763, "p20rAdA": 0.9625398225210432, "p20rAdG": 1.0256725972087777, "p20rUdC": 1.0963088643976766, "p9rCdT": 0.6002513906485107, "p11rUdC": 0.5235341107170944, "p11rUdG": 0.8256120942741708, "p14rUdT": 0.7634896686062116, "p14rUdC": 0.6906288063087096, "p5rCdT": 0.6861080211815175, "p14rUdG": 0.9232168172408156, "p11rUdT": 0.7012982179469454, "p19rCdA": 0.9613333921408952, "p19rGdT": 1.0393618682814008, "p14rAdC": 0.8185616753916954, "p3rUdT": 0.5338921044429938, "p2rGdT": 0.7825875816554332, "p17rGdA": 0.6109055701269652, "p5rCdA": 0.4309922387622424, "p19rGdA": 0.9713988385710316, "p19rGdG": 0.8436653497334935, "p2rGdA": 0.7277284570661035, "p3rUdG": 0.6295186587742405, "p17rGdT": 1.0192900161664795, "p16rGdA": 0.6555691547835332, "p2rGdG": 0.7097934173937911, "p7rCdA": 0.615502907170345, "p20rUdT": 1.0916867864766149, "p4rGdT": 0.8539477955773236, "p9rUdG": 0.9420192622665085, "p16rGdG": 0.7010918095356219, "p18rGdG": 0.6187213360165456, "p7rCdC": 0.10310349170452952, "p18rGdA": 0.7114080099870371, "p17rCdT": 0.9292007927880828, "p6rUdG": 0.4218229309299058, "p13rAdG": 0.5646742533928061, "p6rUdC": 0.24751894565283736, "p13rAdA": 0.460275526567193, "p13rAdC": 0.6134163619052176, "p17rCdC": 0.4830054084641317, "p17rCdA": 0.9661513060758292, "p20rGdA": 1.0501917554168367, "p5rGdT": 0.8712842646309946, "p3rUdC": 0.30326062572805657, "p6rAdC": 0.7980795565227751, "p6rAdA": 0.16379269929395346, "p1rAdC": 0.5768857997185114, "p6rAdG": 0.22729562810140602, "p8rUdT": 0.6428366934727222, "p3rAdC": 0.4862032326164361, "p3rAdA": 0.3832613321709694, "p8rGdG": 0.4887494430256247, "p3rAdG": 0.2742636391545562, "p10rCdA": 0.531741538889424, "p10rCdC": 0.19659668451448192, "p14rCdA": 0.6461512340114774, "p14rCdC": 0.6522575235685056, "p8rAdA": 0.5241075460310852, "p8rUdC": 0.3068316146297328, "p1rAdG": 0.4363455232642247, "p10rGdG": 0.7496321158571098, "p1rCdT": 0.3848783185936392, "p-2rGdT": 0.29100967943483297, "p14rCdT": 0.759947830810585, "p6rUdT": 0.4931548459787635, "p10rCdT": 0.7128183189828421, "p1rCdC": 0.3354040067575753, "p4rAdA": 0.1870100330897905, "p16rAdA": 0.6171771154546071, "p-2rGdA": 0.14740705907125853, "p1rCdA": 0.4310032739142555, "p-2rGdG": 0.051378097185102035, "p4rAdC": 0.33387187725890144, "p4rAdG": 0.5294846032967954, "p12rAdA": 0.6500842726485859, "p20rGdT": 1.1279768130586274, "p12rAdC": 0.8670318177690809, "p15rGdG": 0.8350710160317996, "p15rGdA": 0.6624241958637512, "p12rAdG": 0.3615962769120161, "p1rGdG": 0.6437144832072313, "p1rGdA": 0.7490206041762596, "p15rGdT": 1.0925890963954727, "p13rGdA": 0.4737951978707246, "p13rGdG": 0.7606350745012402, "p8rUdG": 0.9572291839368012, "p7rAdG": 0.2349121384917429, "p1rGdT": 0.9318596679161116, "p4rCdT": 0.4272720993833209, "p5rAdA": 0.15664066542895366, "p14rGdA": 0.7783709264629498, "p20rUdG": 1.047238264223617, "p9rGdT": 1.0003087119578735, "p9rCdA": 0.7458780436645182, "p15rCdT": 0.9983498317136456, "p16rUdT": 0.9456336857274968, "p14rGdG": 0.6319091304925896, "p18rCdA": 0.9707053729449558, "p11rAdG": 0.8186863555107146, "p18rCdC": 0.7269018885290494, "p5rAdC": 0.36095828157943705, "p2rCdA": 0.4122157084086028, "p11rAdC": 0.6412768912990606, "p2rCdC": 0.16977285512059592, "p11rAdA": 0.7671220512554591, "p15rCdA": 1.0268274283628396, "p16rUdC": 0.7891434703283339, "p15rCdC": 0.7809858367640771, "p14rGdT": 0.9586929298156048, "p16rUdG": 0.8702514751869063, "p9rGdA": 0.481815524135473, "p2rCdT": 0.4477556090150516, "p7rAdA": 0.5499212444496354, "p8rCdC": 0.1360036948981249, "p18rCdT": 0.890045167757447, "p8rCdA": 0.7786555141261277, "p8rGdT": 0.9975985819206126, "p18rUdT": 0.8110772273747926, "p13rGdT": 0.9514834004752633, "p5rAdG": 0.09088970873145973, "p18rUdG": 0.7023306344232846, "p18rUdC": 0.8391119634336378, "p9rCdC": 0.1652047854313448}
m2_dic={"2&8": 0.10267680656251194, "14&9": 0.39787896226355973, "14&8": 0.3032819607070207, "14&5": 0.2717809701916892, "14&4": 0.26861354611359367, "14&7": 0.2989479344550415, "14&6": 0.22993361531703155, "14&1": 0.3742522727659798, "14&3": 0.3923817925776261, "14&2": 0.3365357212850082, "19&18": 0.8579137829253523, "19&16": 0.4210945174638167, "19&17": 0.5918798841783129, "19&14": 0.42159231842861766, "19&15": 0.4227065338636196, "19&12": 0.49073905728800965, "19&13": 0.5102619689977657, "19&10": 0.5315939006532678, "19&11": 0.5042859610844738, "12&9": 0.36310635416011194, "12&8": 0.2924433140404284, "6&9": 0.10327307598477488, "6&8": 0.16023686288749103, "6&7": 0.14132674307023127, "12&2": 0.24987887958642177, "12&1": 0.43100169085211665, "6&4": 0.1533135752593859, "6&3": 0.08199730520220291, "12&6": 0.2771164139173283, "6&1": 0.18049262479822842, "12&4": 0.30801407221483257, "20&8": 0.6863907492039096, "20&9": 0.6307990370258802, "20&1": 0.6302964725586668, "20&2": 0.638209791777391, "20&3": 0.6250987197673687, "20&4": 0.7063226518353418, "20&5": 0.7644348588425457, "20&6": 0.7893045813489246, "20&7": 0.7772380327457309, "6&20": 0.7893045813489246, "3&8": 0.17999002526981933, "3&9": 0.20113801881038515, "3&6": 0.08199730520220291, "3&7": 0.11022448550724331, "3&4": 0.1458644428919612, "3&5": 0.14049097113968217, "3&2": 0.11827928558327323, "16&20": 0.5437768312428536, "3&1": 0.1284470184101099, "11&19": 0.5042859610844738, "14&20": 0.5947838498652798, "17&18": 0.5612139470345676, "17&19": 0.5918798841783129, "17&10": 0.36540360147941925, "17&11": 0.38914577186752936, "17&12": 0.3367377505961165, "17&13": 0.35885372845899793, "17&14": 0.301694073115837, "17&15": 0.367077836477745, "17&16": 0.4449631028008122, "18&1": 0.5057180964011575, "18&3": 0.3664125572237141, "18&2": 0.39324787675852624, "18&5": 0.4372748699657515, "18&4": 0.3698549747404842, "18&7": 0.5820522438998675, "18&6": 0.5210553793497249, "18&9": 0.4564247395470679, "18&8": 0.5242543097666745, "9&4": 0.20158702831805567, "9&5": 0.19654747711904483, "9&6": 0.10327307598477488, "9&7": 0.12768544875850352, "9&1": 0.22422665082062235, "9&2": 0.20247936919301684, "9&3": 0.20113801881038515, "9&8": 0.1933985980256089, "12&3": 0.3264045391138925, "6&5": 0.19358108595563675, "11&16": 0.326937774378566, "11&17": 0.38914577186752936, "11&14": 0.37927564769136624, "11&15": 0.3437958168005329, "11&12": 0.3798225441371458, "11&13": 0.42444159983439644, "11&10": 0.28214932688239946, "12&7": 0.1972118514890956, "11&18": 0.3587206773109774, "6&2": 0.10933636337000371, "12&5": 0.32616024864861676, "4&9": 0.20158702831805567, "13&19": 0.5102619689977657, "4&5": 0.18416247376149705, "13&18": 0.3365164775670786, "4&8": 0.1554475657163059, "13&14": 0.47996475260448257, "13&15": 0.36081886266333446, "4&7": 0.08363394660626176, "13&17": 0.35885372845899793, "4&1": 0.12001456807170044, "13&16": 0.28361111274214895, "13&12": 0.40291635974941314, "4&2": 0.09810230306355386, "4&6": 0.1533135752593859, "1&8": 0.14998029850558062, "1&9": 0.22422665082062235, "1&4": 0.12001456807170044, "13&10": 0.3779612692198995, "1&6": 0.18049262479822842, "1&7": 0.14282878472816368, "1&2": 0.12748074205622, "1&3": 0.1284470184101099, "4&3": 0.1458644428919612, "6&13": 0.27322902452608433, "6&12": 0.2771164139173283, "12&20": 0.6267153739905523, "6&10": 0.17060638319544194, "6&17": 0.39025552715136586, "6&16": 0.3800321373381182, "6&15": 0.3269883715516735, "6&14": 0.22993361531703155, "6&19": 0.716750182699738, "6&18": 0.5210553793497249, "1&5": 0.12321218668923103, "2&17": 0.3981458466659072, "2&16": 0.36739230411642876, "2&15": 0.44770790500730606, "2&14": 0.3365357212850082, "2&13": 0.28428326757182665, "2&12": 0.24987887958642177, "2&11": 0.32382041087554636, "2&10": 0.23148429316427502, "2&19": 0.4921017745864248, "2&18": 0.39324787675852624, "8&15": 0.37567398990151096, "8&14": 0.3032819607070207, "8&17": 0.40622235900202625, "8&16": 0.41166941384924677, "14&19": 0.42159231842861766, "8&10": 0.23868708855092796, "8&13": 0.3053673303081347, "8&12": 0.2924433140404284, "14&15": 0.4155806261856236, "14&17": 0.301694073115837, "14&16": 0.3126096694137775, "8&19": 0.6636076464406538, "14&10": 0.3252002493517645, "14&13": 0.47996475260448257, "14&12": 0.4383562297056227, "17&20": 0.646684099843791, "7&8": 0.12120428269837226, "7&9": 0.12768544875850352, "7&2": 0.11834242438028145, "7&3": 0.11022448550724331, "7&1": 0.14282878472816368, "7&6": 0.14132674307023127, "7&4": 0.08363394660626176, "7&5": 0.17658990495868065, "9&20": 0.6307990370258802, "19&20": 0.9001887571644086, "1&20": 0.6302964725586668, "6&11": 0.14041534732969138, "4&19": 0.5289761917686021, "4&18": 0.3698549747404842, "2&1": 0.12748074205622, "2&7": 0.11834242438028145, "2&6": 0.10933636337000371, "2&5": 0.09504533142835324, "2&4": 0.09810230306355386, "4&11": 0.2546126791898862, "4&10": 0.21046146576659402, "4&13": 0.41725670980771984, "4&12": 0.30801407221483257, "4&15": 0.31026948262063314, "4&14": 0.26861354611359367, "4&17": 0.28604994566119, "4&16": 0.2520448151295281, "16&19": 0.4210945174638167, "16&18": 0.41695850398309997, "16&13": 0.28361111274214895, "16&12": 0.3309671321370943, "16&11": 0.326937774378566, "16&10": 0.3634295729928539, "16&17": 0.4449631028008122, "16&15": 0.44162543298782314, "16&14": 0.3126096694137775, "13&20": 0.6617366826480138, "18&20": 0.8244985545640284, "5&20": 0.7644348588425457, "7&20": 0.7772380327457309, "3&20": 0.6250987197673687, "10&11": 0.28214932688239946, "10&13": 0.3779612692198995, "10&12": 0.37775448426174313, "10&15": 0.3212775837111084, "10&14": 0.3252002493517645, "10&17": 0.36540360147941925, "10&16": 0.3634295729928539, "10&19": 0.5315939006532678, "10&18": 0.41754399764477573, "13&11": 0.42444159983439644, "7&18": 0.5820522438998675, "8&20": 0.6863907492039096, "3&15": 0.3527009909279527, "15&8": 0.37567398990151096, "15&9": 0.376846020329701, "15&1": 0.41301205705770927, "15&2": 0.44770790500730606, "15&3": 0.3527009909279527, "15&4": 0.31026948262063314, "15&5": 0.2357234635065409, "15&6": 0.3269883715516735, "15&7": 0.30491319381029314, "5&8": 0.11689275247666778, "3&18": 0.3664125572237141, "7&15": 0.30491319381029314, "5&1": 0.12321218668923103, "5&2": 0.09504533142835324, "5&3": 0.14049097113968217, "5&4": 0.18416247376149705, "5&6": 0.19358108595563675, "5&7": 0.17658990495868065, "13&6": 0.27322902452608433, "13&7": 0.2580901110454531, "13&4": 0.41725670980771984, "13&5": 0.31869957665577703, "13&2": 0.28428326757182665, "13&3": 0.27549090759667777, "13&1": 0.3354825762123333, "13&8": 0.3053673303081347, "13&9": 0.36341269816512567, "11&4": 0.2546126791898862, "11&5": 0.2034975522681339, "11&6": 0.14041534732969138, "11&7": 0.16414220686819317, "11&1": 0.4307456680014252, "11&2": 0.32382041087554636, "11&3": 0.1389329059809266, "11&8": 0.2595117474576364, "11&9": 0.33913947865437966, "4&20": 0.7063226518353418, "12&19": 0.49073905728800965, "12&18": 0.3717931731649352, "12&17": 0.3367377505961165, "12&16": 0.3309671321370943, "12&15": 0.33088709158781454, "12&14": 0.4383562297056227, "12&13": 0.40291635974941314, "12&11": 0.3798225441371458, "12&10": 0.37775448426174313, "10&9": 0.24770416018792898, "10&8": 0.23868708855092796, "10&1": 0.3850966315558603, "10&3": 0.2528620467835993, "10&2": 0.23148429316427502, "10&5": 0.1801626936282457, "10&4": 0.21046146576659402, "10&7": 0.180703317582196, "10&6": 0.17060638319544194, "16&9": 0.3639728211237177, "16&8": 0.41166941384924677, "16&7": 0.3334777617011124, "16&6": 0.3800321373381182, "16&5": 0.3317506400314064, "16&4": 0.2520448151295281, "16&3": 0.3843030491900418, "16&2": 0.36739230411642876, "16&1": 0.41705300585695865, "18&19": 0.8579137829253523, "18&11": 0.3587206773109774, "18&10": 0.41754399764477573, "18&13": 0.3365164775670786, "18&12": 0.3717931731649352, "18&15": 0.2890935397992596, "18&14": 0.34664461479856723, "18&17": 0.5612139470345676, "18&16": 0.41695850398309997, "2&20": 0.638209791777391, "1&15": 0.41301205705770927, "3&10": 0.2528620467835993, "3&11": 0.1389329059809266, "3&12": 0.3264045391138925, "3&13": 0.27549090759667777, "3&14": 0.3923817925776261, "7&19": 0.6798971749446002, "3&16": 0.3843030491900418, "3&17": 0.3092091673592845, "7&14": 0.2989479344550415, "3&19": 0.5147625652762765, "7&16": 0.3334777617011124, "7&17": 0.4704757017017995, "7&10": 0.180703317582196, "7&11": 0.16414220686819317, "7&12": 0.1972118514890956, "7&13": 0.2580901110454531, "1&18": 0.5057180964011575, "1&19": 0.6013715522156308, "1&16": 0.41705300585695865, "1&17": 0.39930521646570344, "1&14": 0.3742522727659798, "15&20": 0.5037504974793073, "1&12": 0.43100169085211665, "1&13": 0.3354825762123333, "1&10": 0.3850966315558603, "1&11": 0.4307456680014252, "8&11": 0.2595117474576364, "14&18": 0.34664461479856723, "9&16": 0.3639728211237177, "10&20": 0.6178840158450186, "9&14": 0.39787896226355973, "9&15": 0.376846020329701, "9&12": 0.36310635416011194, "9&13": 0.36341269816512567, "9&10": 0.24770416018792898, "9&11": 0.33913947865437966, "9&18": 0.4564247395470679, "9&19": 0.5807857253396284, "14&11": 0.37927564769136624, "8&18": 0.5242543097666745, "5&9": 0.19654747711904483, "5&18": 0.4372748699657515, "5&19": 0.6492409460109452, "5&12": 0.32616024864861676, "5&13": 0.31869957665577703, "5&10": 0.1801626936282457, "5&11": 0.2034975522681339, "5&16": 0.3317506400314064, "5&17": 0.3488895323481598, "5&14": 0.2717809701916892, "5&15": 0.2357234635065409, "9&17": 0.4043835631132616, "11&20": 0.6101059715277156, "20&12": 0.6267153739905523, "20&13": 0.6617366826480138, "20&10": 0.6178840158450186, "20&11": 0.6101059715277156, "20&16": 0.5437768312428536, "20&17": 0.646684099843791, "20&14": 0.5947838498652798, "20&15": 0.5037504974793073, "20&18": 0.8244985545640284, "20&19": 0.9001887571644086, "2&9": 0.20247936919301684, "8&9": 0.1933985980256089, "8&1": 0.14998029850558062, "8&3": 0.17999002526981933, "8&2": 0.10267680656251194, "8&5": 0.11689275247666778, "8&4": 0.1554475657163059, "8&7": 0.12120428269837226, "8&6": 0.16023686288749103, "17&8": 0.40622235900202625, "17&9": 0.4043835631132616, "17&2": 0.3981458466659072, "17&3": 0.3092091673592845, "17&1": 0.39930521646570344, "17&6": 0.39025552715136586, "17&7": 0.4704757017017995, "17&4": 0.28604994566119, "17&5": 0.3488895323481598, "2&3": 0.11827928558327323, "15&12": 0.33088709158781454, "15&13": 0.36081886266333446, "15&10": 0.3212775837111084, "15&11": 0.3437958168005329, "15&16": 0.44162543298782314, "15&17": 0.367077836477745, "15&14": 0.4155806261856236, "15&18": 0.2890935397992596, "15&19": 0.4227065338636196, "19&8": 0.6636076464406538, "19&9": 0.5807857253396284, "19&4": 0.5289761917686021, "19&5": 0.6492409460109452, "19&6": 0.716750182699738, "19&7": 0.6798971749446002, "19&1": 0.6013715522156308, "19&2": 0.4921017745864248, "19&3": 0.5147625652762765}

gRNA_off_target = dict(find_off_target(integrated_sequences,gRNA,max_mismatch))
data=[]
for gRNA in gRNA_off_target.keys():
    for info in gRNA_off_target[gRNA]:
        transcript_id,target,mismatch = info
        data.append({"gRNA":gRNA,"DNA":target,"mismatch":mismatch,"transcript_id":transcript_id})
df = pd.DataFrame(data)

sg_ls=df["gRNA"]
tg_ls=df["DNA"]

# mismatch type
def GetMutType(s1, s2):
    pos_ls = []
    mut_ls = []
    for i in range(20):
        r = ''
        d = ''
        if s1[i] != s2[i]:
            pos = 20 - i
            if s1[i] == 'T':
                r = 'U'
            else:
                r = s1[i]
            if s2[i] == 'A':
                d = 'T'
            elif s2[i] == 'T':
                d = 'A'
            elif s2[i] == 'C':
                d = 'G'
            elif s2[i] == 'G':
                d = 'C'
            pos_ls.append(pos)
            mut_ls.append('p' + str(pos) + 'r' + r + 'd' + d)
    return pos_ls, mut_ls

def MisType(sg_ls, tg_ls):
    tp_ls = []
    for i in range(len(sg_ls)):
        s1 = sg_ls[i][0:20].upper()
        s2 = tg_ls[i][0:20].upper()
        tp = '|'.join(GetMutType(s1, s2)[1])
        tp_ls.append(tp)

    return tp_ls

def Multiply(m1_dic, sg_ls, tg_ls):
    me_ls = []
    for i in range(len(sg_ls)):
        s1 = sg_ls[i][0:20].upper()
        s2 = tg_ls[i][0:20].upper()
        # print (s1,s2)
        mut_ls = GetMutType(s1, s2)[1]
        score = 1
        for mut in mut_ls:  ##Multiply all the 1-mismatch effects
            score = score * m1_dic[mut]  ##m1_dic: dic file
        me_ls.append(score)
    return me_ls

import math
def CombineGM(m2_dic, sg_ls, tg_ls):
    cm_ls = []
    for i in range(len(sg_ls)):
        s1 = sg_ls[i][0:20].upper()
        s2 = tg_ls[i][0:20].upper()
        pos_ls = sorted(GetMutType(s1, s2)[0])

        ## Combinatorial effect at certain position combination.
        di_ls = list(combinations(pos_ls, 2))
        m=1
        for di in di_ls:
            m=m*m2_dic[str(di[0]) + '&' + str(di[1])]
        cm_ls.append(m)
    return cm_ls


def CombineScores(m1_dic, m2_dic, sg_ls, tg_ls):
    combined_scores = []
    single_effects = Multiply(m1_dic, sg_ls, tg_ls)
    combinatorial_effects = CombineGM(m2_dic, sg_ls, tg_ls)
    for i in range(len(sg_ls)):
        log_m1 = np.log(single_effects[i])
        log_m2 = np.log(combinatorial_effects[i])
        s1 = sg_ls[i][0:20].upper()
        s2 = tg_ls[i][0:20].upper()
        k = len(GetMutType(s1, s2)[0])
        if k > 0:
            log_s_off = log_m1 + (2 /k) *log_m2
        else:
            log_s_off = log_m1
        combined_scores.append(np.exp(log_s_off))
    return combined_scores

def score_df(m1_dic, m2_dic, df):
    sg_ls = list(df['gRNA'])  # Get list of input sgRNAs
    tg_ls = list(df['DNA'])  # Get list of input DNA targets

    np.random.seed(24)  # for reproducibility
    df['MDE'] = Multiply(m1_dic, sg_ls, tg_ls)
    df['CE'] = CombineGM(m2_dic, sg_ls, tg_ls)
    df['score'] = CombineScores(m1_dic, m2_dic, sg_ls, tg_ls)
    return df

result = score_df(m1_dic, m2_dic, df)
result_group = result.groupby("gRNA", as_index=False).agg({"mismatch": "mean", "score": "mean"})

column_to_choose = df.columns[1:].tolist()
print("For ideal gRNA, here are the factors to choose:", column_to_choose)
column_name = input("Your choice:").strip()

while True:
    column_name = input("Your choice：").strip()
    if column_name in column_to_choose:
        break
    else:
        print("Invalid! Please choose again：", column_to_choose)

while True:
    try:
        top_n = int(input("The number (N) of gRNAs you want to obtain: ").strip())
        if top_n > 0:
            break
        else:
            print("N value must be a positive integer!")
    except ValueError:
        print("Invalid number! Please enter a positive integer.")

sorted_values = df.sort_values(by=column_name, ascending=False)['gRNA'].head(top_n)
print(f"\nTop {top_n} gRNAs sorted by '{column_name}':")
print(sorted_values)

